#include <Dabble.h>
#include <SoftwareSerial.h>
#include <AFMotor.h>

// HC-05: TX → D2, RX → D3
SoftwareSerial Bluetooth(2, 3);

// Moteurs
AF_DCMotor motor1(1, MOTOR12_1KHZ);
AF_DCMotor motor2(2, MOTOR12_1KHZ);
AF_DCMotor motor3(3, MOTOR34_1KHZ);
AF_DCMotor motor4(4, MOTOR34_1KHZ);
const int Speeed = 255;

// LEDs externes
const int LED_AVANT_GAUCHE  = 8;
const int LED_AVANT_DROITE = 9;
const int LED_ARRIERE_GAUCHE  = 10;
const int LED_ARRIERE_DROITE = 11;

void setup() {
  Bluetooth.begin(9600);
  Dabble.begin(Bluetooth);
  Serial.begin(9600);

  // initialise les broches LED
  pinMode(LED_AVANT_GAUCHE,  OUTPUT);
  pinMode(LED_AVANT_DROITE,  OUTPUT);
  pinMode(LED_ARRIERE_GAUCHE,  OUTPUT);
  pinMode(LED_ARRIERE_DROITE, OUTPUT);

  Stop();  // tout éteint au démarrage
}

void loop() {
  Dabble.processInput();

  if (GamePad.isUpPressed()) {
    Serial.println("UP");
    setLEDs(true);
    forward();
  }
  else if (GamePad.isDownPressed()) {
    Serial.println("DOWN");
    setLEDs(false);
    back();
  }
  else if (GamePad.isLeftPressed()) {
    Serial.println("LEFT");
    setLEDs(true);
    left();
  }
  else if (GamePad.isRightPressed()) {
    Serial.println("RIGHT");
    setLEDs(true);
    right();
  }
  else if (GamePad.isTrianglePressed()) {
    Serial.println("TRIANGLE = TOP RIGHT");
    setLEDs(true);
    topright();
  }
  else if (GamePad.isSquarePressed()) {
    Serial.println("SQUARE = TOP LEFT");
    setLEDs(true);
    topleft();
  }
  else if (GamePad.isCirclePressed()) {
    Serial.println("CIRCLE = BOTTOM RIGHT");
    setLEDs(false);
    bottomright();
  }
  else if (GamePad.isCrossPressed()) {
    Serial.println("CROSS = BOTTOM LEFT");
    setLEDs(false);
    bottomleft();
  }
  else if (GamePad.isSelectPressed()) {
    Serial.println("SELECT = STOP");
    Stop();
  }
}

// allume les LED blanches si avant==true, sinon les rouges
void setLEDs(bool avant) {
  digitalWrite(LED_AVANT_GAUCHE,  avant ? HIGH : LOW);
  digitalWrite(LED_AVANT_DROITE, avant ? HIGH : LOW);
  digitalWrite(LED_ARRIERE_GAUCHE,  avant ? LOW : HIGH);
  digitalWrite(LED_ARRIERE_DROITE, avant ? LOW : HIGH);
}

// Arrêt complet
void Stop() {
  digitalWrite(LED_AVANT_GAUCHE,  LOW);
  digitalWrite(LED_AVANT_DROITE, LOW);
  digitalWrite(LED_ARRIERE_GAUCHE,  LOW);
  digitalWrite(LED_ARRIERE_DROITE, LOW);

  motor1.run(RELEASE);
  motor2.run(RELEASE);
  motor3.run(RELEASE);
  motor4.run(RELEASE);
}

// Fonctions moteurs
void forward() {
  motor1.setSpeed(Speeed); motor1.run(FORWARD);
  motor2.setSpeed(Speeed); motor2.run(FORWARD);
  motor3.setSpeed(Speeed); motor3.run(FORWARD);
  motor4.setSpeed(Speeed); motor4.run(FORWARD);
}

void back() {
  motor1.setSpeed(Speeed); motor1.run(BACKWARD);
  motor2.setSpeed(Speeed); motor2.run(BACKWARD);
  motor3.setSpeed(Speeed); motor3.run(BACKWARD);
  motor4.setSpeed(Speeed); motor4.run(BACKWARD);
}

void left() {
  motor1.setSpeed(Speeed); motor1.run(BACKWARD);
  motor2.setSpeed(Speeed); motor2.run(BACKWARD);
  motor3.setSpeed(Speeed); motor3.run(FORWARD);
  motor4.setSpeed(Speeed); motor4.run(FORWARD);
}

void right() {
  motor1.setSpeed(Speeed); motor1.run(FORWARD);
  motor2.setSpeed(Speeed); motor2.run(FORWARD);
  motor3.setSpeed(Speeed); motor3.run(BACKWARD);
  motor4.setSpeed(Speeed); motor4.run(BACKWARD);
}

void topright() {
  motor1.setSpeed(Speeed / 3.1); motor1.run(FORWARD);
  motor2.setSpeed(Speeed / 3.1); motor2.run(FORWARD);
  motor3.setSpeed(Speeed);       motor3.run(FORWARD);
  motor4.setSpeed(Speeed);       motor4.run(FORWARD);
}

void topleft() {
  motor1.setSpeed(Speeed);       motor1.run(FORWARD);
  motor2.setSpeed(Speeed);       motor2.run(FORWARD);
  motor3.setSpeed(Speeed / 3.1); motor3.run(FORWARD);
  motor4.setSpeed(Speeed / 3.1); motor4.run(FORWARD);
}

void bottomright() {
  motor1.setSpeed(Speeed / 3.1); motor1.run(BACKWARD);
  motor2.setSpeed(Speeed / 3.1); motor2.run(BACKWARD);
  motor3.setSpeed(Speeed);       motor3.run(BACKWARD);
  motor4.setSpeed(Speeed);       motor4.run(BACKWARD);
}

void bottomleft() {
  motor1.setSpeed(Speeed);       motor1.run(BACKWARD);
  motor2.setSpeed(Speeed);       motor2.run(BACKWARD);
  motor3.setSpeed(Speeed / 3.1); motor3.run(BACKWARD);
  motor4.setSpeed(Speeed / 3.1); motor4.run(BACKWARD);
}
